@using Game.Web.Pages
@using System.Threading
@using System.Diagnostics

<h3>@enemy.name @enemy.level </h3>
<h5>Kill monster under @enemy.maxTime seconds</h5>
<div class="hpBar">
    <div class="hpBarLeft" style="@styleHPString"></div>
</div>
<div class="buttonsDiv">
    <button @onclick="click" class="btn btn-light">ATTACK</button>
    <button @onclick="exit" class="btn btn-danger">EXIT</button>
</div>
<p>TIME: @Math.Round(seconds, 2)</p>
<h3>@failed</h3>

@code {
    [CascadingParameter]
    public AppState appState { get; set; }
    [Parameter]
    public EnemyVeigar enemy { get; set; }
    [Parameter]
    public Player player { get; set; }

    public string styleHPString = "width: 100%";
    public string failed = "";
    public int full = 0;
    double seconds = 0;
    bool dead = false;
    Stopwatch stopWatch = new Stopwatch();
    Dictionary<string, object> dictionary = new Dictionary<string, object>();

    protected void exit()
    {

        styleHPString = "width: 100%";
        if (failed == "FAILED")
        {
             enemy.hp = full;
        }
        failed = "";
        seconds = 0;
        dead = false;
        stopWatch.Reset();
        appState.Action?.Invoke();
        if (full!=0)
        {
            enemy.hp = full;
        }
        full = 0;
        // appState.ActionWithParameters?.Invoke(dictionary);
    }
    protected void click()
    {
        if (!dead)
        {
            if (full == 0)
            {
                full = enemy.hp;
            }
            stopWatch.Stop();
            TimeSpan ts = stopWatch.Elapsed;
            seconds = ts.TotalSeconds;
            enemy.hp -= player.damage;
            int hpBar = enemy.hp * 100 / full;
            styleHPString = $"width: {hpBar}%";
            if (enemy.hp <= 0)
            {
                if (seconds < enemy.maxTime)
                {
                    dead = true;
                    failed = "Succesfull";
                }
                else
                {
                    failed = "FAILED";
                }
            }
            else
            {
                stopWatch.Start();
            }
        }
    }
}
